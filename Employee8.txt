Consider the following database
Employee(emp_no,name,skill,pay-rate) eno primary key
Position(posting_no,skill) posting_no primary key
Duty_allocation(posting_no,emp_no,day,shift)
Find the SQL queries for the following:
1. Get the duty allocation details for emp_no 123461 for the month of April 1986.
2. Find the shift details for Employee ‘xyz’
3. Get employees whose rate of pay is more than or equal to the rate of pay of employee ‘xyz’
4. Get the names and pay rates of employees with emp_no less than 123460 whose rate of pay is
more than the rate of pay of at least one employee with emp_no greater than or equal to 123460.
5. Find the names of employees who are assigned to all positions that require a Chef’s skill
6 .Find the employees with the lowest pay rate
7 .Get the employee numbers of all employees working on at least two dates.
8 .Get a list of names of employees with the skill of Chef who are assigned a duty
9 .Get a list of employees not assigned a duty
10.Get a count of different employees on each shift

-- Create tables
CREATE TABLE Employee (
  emp_no INT PRIMARY KEY,
  name VARCHAR(255),
  skill VARCHAR(255),
  pay_rate DECIMAL(10, 2)
);

CREATE TABLE Position (
  posting_no INT PRIMARY KEY,
  skill VARCHAR(255)
);

CREATE TABLE Duty_allocation (
  posting_no INT,
  emp_no INT,
  day DATE,
  shift VARCHAR(255),
  FOREIGN KEY (posting_no) REFERENCES Position(posting_no),
  FOREIGN KEY (emp_no) REFERENCES Employee(emp_no)
);

-- Insert sample data
INSERT INTO Employee (emp_no, name, skill, pay_rate) VALUES
  (123460, 'John', 'Chef', 20.00),
  (123461, 'Alice', 'Waiter', 15.00),
  (123462, 'Bob', 'Chef', 22.00),
  (123463, 'Eve', 'Waiter', 16.50);

INSERT INTO Position (posting_no, skill) VALUES
  (1, 'Chef'),
  (2, 'Waiter');

INSERT INTO Duty_allocation (posting_no, emp_no, day, shift) VALUES
  (1, 123460, '1986-04-01', 'Morning'),
  (1, 123460, '1986-04-15', 'Evening'),
  (1, 123462, '1986-04-05', 'Morning'),
  (1, 123462, '1986-04-10', 'Evening'),
  (2, 123461, '1986-04-10', 'Morning'),
  (2, 123461, '1986-04-20', 'Evening'),
  (2, 123463, '1986-04-12', 'Morning');

-- SQL queries
-- 1. Get the duty allocation details for emp_no 123461 for the month of April 1986.
SELECT * FROM Duty_allocation
WHERE emp_no = 123461
  AND day BETWEEN '1986-04-01' AND '1986-04-30';

-- 2. Find the shift details for Employee ‘xyz’
SELECT d.* FROM Duty_allocation d
INNER JOIN Employee e ON d.emp_no = e.emp_no
WHERE e.name = 'Alice';

-- 3. Get employees whose rate of pay is more than or equal to the rate of pay of employee ‘xyz’
SELECT * FROM Employee
WHERE pay_rate >= (SELECT pay_rate FROM Employee WHERE name = 'Alice');

-- 4. Get the names and pay rates of employees with emp_no less than 123460 whose rate of pay is
-- more than the rate of pay of at least one employee with emp_no greater than or equal to 123460.
SELECT name, pay_rate FROM Employee
WHERE emp_no < 123460
  AND pay_rate > ANY (SELECT pay_rate FROM Employee WHERE emp_no >= 123460);

-- 5. Find the names of employees who are assigned to all positions that require a Chef’s skill
SELECT e.name
FROM Employee e
WHERE NOT EXISTS (
  SELECT p.posting_no FROM Position p
  WHERE p.skill = 'Chef'
  EXCEPT
  SELECT d.posting_no FROM Duty_allocation d
  WHERE d.emp_no = e.emp_no
);

-- 6. Find the employees with the lowest pay rate
SELECT * FROM Employee
WHERE pay_rate = (SELECT MIN(pay_rate) FROM Employee);

-- 7. Get the employee numbers of all employees working on at least two dates.
SELECT emp_no
FROM Duty_allocation
GROUP BY emp_no
HAVING COUNT(DISTINCT day) >= 2;

-- 8. Get a list of names of employees with the skill of Chef who are assigned a duty
SELECT e.name
FROM Employee e
JOIN Duty_allocation d ON e.emp_no = d.emp_no
WHERE e.skill = 'Chef';

-- 9. Get a list of employees not assigned a duty
SELECT e.name
FROM Employee e
LEFT JOIN Duty_allocation d ON e.emp_no = d.emp_no
WHERE d.emp_no IS NULL;

-- 10. Get a count of different employees on each shift
SELECT shift, COUNT(DISTINCT emp_no) AS employee_count
FROM Duty_allocation
GROUP BY shift;
